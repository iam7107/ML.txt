#Q1
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import pandas as pd

# Step 1: Load California housing data
california_housing = fetch_california_housing()

# Convert to DataFrame
df = pd.DataFrame(california_housing.data, columns=california_housing.feature_names)
df['Price'] = california_housing.target  # Add target as 'Price'
df
X = df.drop('Price', axis=1)  # Features (all columns except 'Price')
y = df['Price']  # Target (Price of the house)

# Split data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 3: Create a Multiple Linear Regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Step 4: Make predictions on the test data
y_pred = model.predict(X_test)

# Step 5: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse:.2f}")

# Step 6: Predict house price for a specific input (optional)
# Example: Predict price for a house with specific feature values (you can modify this as needed)
example_input = pd.DataFrame([[8.5, 0.0, 0.0, 3.5, 300, 30, 1.2, 1.0]], columns=X.columns)  # Modify with appropriate values
predicted_price = model.predict(example_input)
print(f"Predicted price for the example input: ${predicted_price[0]:.2f}")










#Q2
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

# Step 1: Load the dataset
df = pd.read_csv('UniversalBank.csv')
df

# Step 2: Data Preprocessing
# Assuming 'Personal Loan' is the target variable and the rest are features
# Drop columns that are not useful for prediction (e.g., 'ID' or 'ZIP Code')
df = df.drop(columns=['ID', 'ZIP Code'])

# If there are any categorical variables, you can encode them (this is an example)
# df['Gender'] = df['Gender'].map({'Male': 0, 'Female': 1})

# Separate features (X) and target variable (y)
X = df.drop(columns=['Personal Loan'])  # Features
y = df['Personal Loan']  # Target

# Step 3: Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Standardize the features (important for SVM)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Step 5: Create and train the Linear SVM model
model = SVC(kernel='linear')
model.fit(X_train, y_train)

# Step 6: Make predictions
y_pred = model.predict(X_test)

# Step 7: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# You can also print the coefficients of the linear model
print("Model coefficients:", model.coef_)
print("Intercept:", model.intercept_)
