# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

# Load the dataset (Replace with the path to your dataset)
url = "https://raw.githubusercontent.com/selva86/datasets/master/BostonHousing.csv"
data = pd.read_csv(url)

# Display the first few rows of the dataset
print("First few rows of the dataset:")
print(data.head())

# Step 1: Preprocessing - Check for null values
print("\nChecking for null values in each column:")
print(data.isnull().sum())

# Step 2: Features and Target Variables
# Features (predictors)
X = data.drop('medv', axis=1)  # 'medv' is the target (house price)

# Target (House Price)
y = data['medv']

# Step 3: Split the data into training and testing sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Standardize the features (important for some models but not strictly necessary for linear regression)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 5: Train the Multiple Linear Regression model
model = LinearRegression()
model.fit(X_train_scaled, y_train)

# Step 6: Make predictions on the test data
y_pred = model.predict(X_test_scaled)

# Step 7: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("\nModel Performance:")
print(f"Mean Squared Error: {mse}")
print(f"R^2 Score: {r2}")

# Step 8: Display the predicted vs actual values
results = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print("\nPredicted vs Actual values:")
print(results.head())






#q2
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix,classification_report
df = pd.read_csv('crash.csv')
import pandas as pd
import numpy as np

# Number of samples
num_samples = 100

# Generate sample data
np.random.seed(0)  # For reproducibility
data = {
    'age': np.random.randint(18, 80, size=num_samples),
    'speed': np.random.uniform(10, 100, size=num_samples),
    'survived': np.random.choice([0, 1], size=num_samples)
}

# Create a DataFrame
df = pd.DataFrame(data)

# Save to CSV
df.to_csv('crash.csv', index=False)

print("Dataset 'crash.csv' has been created successfully.")
print(df.head()) # Display the first few rows of the dataset
print(df.info()) # Check for missing values and data types
print(df.describe())
df=df.dropna()
X = df[['age', 'speed']] # Features: age and speed
y = df['survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
random_state=42)
model = LogisticRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Display the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", conf_matrix)

# Display the classification report
class_report = classification_report(y_test, y_pred)
print("Classification Report:\n", class_report)

# Step 8: Make Predictions
# Predicting the survivability on the test set
predicted_survivability = model.predict(X_test)

print("Predicted Survivability:", predicted_survivability)
print("Actual Outcomes:", y_test.values)
