#Q1
import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Step 1: Load the dataset
# Replace 'your_path_to_iris.csv' with the actual path to your local dataset file
iris_data = pd.read_csv('iris.csv')
iris_data

# Step 2: Prepare the data
X = iris_data.iloc[:, :-1].values  # Assuming the last column is the target
y = iris_data.iloc[:, -1].values

# Step 3: Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 4: Apply PCA to reduce to 2 dimensions
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

# Step 5: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.3, random_state=42)

# Step 6: Train an SVM classifier on the 2D data
svm = SVC(kernel='linear', random_state=42)
svm.fit(X_train, y_train)


# Step 7: Test the classifier
y_pred = svm.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model accuracy on test data: {accuracy:.2f}")

# Step 8: Predict the flower type for a new data point
# Example input: [sepal length, sepal width, petal length, petal width]
new_flower_data = [5.1, 3.5, 1.4, 0.2]
new_flower_data_scaled = scaler.transform([new_flower_data])
new_flower_data_pca = pca.transform(new_flower_data_scaled)
predicted_flower = svm.predict(new_flower_data_pca)

print(f"The predicted flower type for the given input is: {predicted_flower[0]}")









#Q2
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
employee_data = pd.read_csv('employee_data.csv')
employee_data

# Step 2: Data Preprocessing
# Drop any rows with missing or null values
employee_data.dropna(inplace=True)

# Select relevant feature(s) for clustering (e.g., 'Income')
# Assuming there's an 'Income' column in the dataset
X = employee_data[['Salary']].values

# Step 3: Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 4: Use the elbow method to find the optimal value of k
inertia_values = []
k_range = range(1, 11)
for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    inertia_values.append(kmeans.inertia_)

# Plot the elbow graph
plt.figure(figsize=(8, 5))
plt.plot(k_range, inertia_values, 'bo-')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal k')
plt.show()

# Step 5: Calculate Silhouette Score for each k (from 2 to 10)
silhouette_scores = []

for k in range(2, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    score = silhouette_score(X_scaled, kmeans.labels_)
    silhouette_scores.append(score)

# Plot the Silhouette Scores
plt.figure(figsize=(8, 5))
plt.plot(range(2, 11), silhouette_scores, 'go-')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Score for Optimal k')
plt.show()

# Step 6: Choose the optimal k based on elbow and silhouette score, then train final KMeans model
optimal_k = silhouette_scores.index(max(silhouette_scores)) + 2  # +2 to adjust for the range starting at 2
print(f"Optimal number of clusters (k) based on silhouette score: {optimal_k}")

kmeans = KMeans(n_clusters=optimal_k, random_state=42)
employee_data['Income_Cluster'] = kmeans.fit_predict(X_scaled)

# Step 7: Analyze and display results
print("Cluster Centers (Income groups):")
print(scaler.inverse_transform(kmeans.cluster_centers_))  # Scale back to original values
print("\nCluster distribution:")
print(employee_data['Income_Cluster'].value_counts())

# Optional: Show a plot of the clustered data
plt.figure(figsize=(8, 5))
plt.scatter(X_scaled, np.zeros_like(X_scaled), c=employee_data['Income_Cluster'], cmap='viridis')
plt.xlabel('Standardized Income')
plt.title('Employee Income Clusters')
plt.show()
