# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
data = pd.read_csv("Fuel Consumption.csv")

# Display the first few rows of the dataset
print("First few rows of the dataset:")
print(data.head())

# Step 1: Select features and target variable
# Using 'Engine Size(L)', 'Cylinders', and 'Fuel Consumption(Comb (L/100 km))' as features
# Target variable is 'CO2 Emissions(g/km)' (proxy for fuel consumption)
X = data[['Engine Size(L)', 'Cylinders', 'Fuel Consumption(Comb (L/100 km))']]
y = data['CO2 Emissions(g/km)']

# Step 2: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 3: Train the Multiple Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 4: Make predictions on the test data
y_pred = model.predict(X_test)

# Step 5: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("Model Performance:")
print(f"Mean Squared Error: {mse}")
print(f"R-squared Score: {r2}")

# Step 6: Display coefficients of the features
print("\nModel Coefficients:")
for feature, coef in zip(X.columns, model.coef_):
    print(f"{feature}: {coef:.4f}")

# Optionally, visualize predictions vs actual values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', lw=2)
plt.xlabel('Actual CO2 Emissions (g/km)')
plt.ylabel('Predicted CO2 Emissions (g/km)')
plt.title('Actual vs Predicted CO2 Emissions')
plt.show()






#q2
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import r2_score
df = pd.read_csv('Position_Salaries.csv')
df
df.head()
df.info()
df.describe()
X = df[['Level']].values # Features (Level)
y = df['Salary'].values # Target (Salary)
lin_reg = LinearRegression()
lin_reg.fit(X, y)
poly = PolynomialFeatures(degree=4)
X_poly = poly.fit_transform(X)

poly_reg = LinearRegression()
poly_reg.fit(X_poly, y)
y_pred_linear = lin_reg.predict(X)
y_pred_poly = poly_reg.predict(X_poly)
r2_linear = r2_score(y, y_pred_linear)
r2_poly = r2_score(y, y_pred_poly)

print(f"R2 Score of Simple Linear Regression: {r2_linear}")
print(f"R2 Score of Polynomial Regression: {r2_poly}")
plt.scatter(X, y, color='red', label='Actual data')
plt.plot(X, y_pred_linear, color='blue', label='Linear Regression')
plt.plot(X, y_pred_poly, color='green', label='Polynomial Regression')
plt.title('Salary vs. Level')
plt.xlabel('Level')
plt.ylabel('Salary')
plt.legend()
plt.show()
levels_to_predict = np.array([[11], [12]])

salary_pred_linear = lin_reg.predict(levels_to_predict)
print(f"Linear Regression Predictions for Levels 11 and 12:{salary_pred_linear}")
levels_to_predict_poly = poly.transform(levels_to_predict)
salary_pred_poly = poly_reg.predict(levels_to_predict_poly)
print(f"Polynomial Regression Predictions for Levels 11 and 12:{salary_pred_poly}")
