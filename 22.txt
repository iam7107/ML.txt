#Q1
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
california_housing = fetch_california_housing()

# Convert to DataFrame
import pandas as pd
df = pd.DataFrame(california_housing.data, columns=california_housing.feature_names)
df['Price'] = california_housing.target  # Add target as 'Price'
df

# Step 2: Select a single feature for Simple Linear Regression (e.g., 'MedInc' - Median Income)
X = df[['MedInc']]  # Feature: Median income
y = df['Price']  # Target: House price

# Step 3: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Create a Simple Linear Regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Step 5: Make predictions
y_pred = model.predict(X_test)

# Step 6: Evaluate the model
print(f"Intercept: {model.intercept_}")
print(f"Coefficient: {model.coef_}")

# Plot the regression line
plt.scatter(X_test, y_test, color='blue', label='Actual Price')
plt.plot(X_test, y_pred, color='red', label='Predicted Price')
plt.title('Simple Linear Regression for House Price Prediction')
plt.xlabel('Median Income')
plt.ylabel('Price')
plt.legend()
plt.show()












#Q2
# Import necessary libraries
import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules

# 1. Load the dataset
# Replace 'groceries.csv' with the path to your grocery dataset file
groceries_data = pd.read_csv('groceries.csv')

# Display the first few rows of the dataset
print("First few rows of the dataset:")
print(groceries_data.head())

# 2. Preprocess the Data
# Create a basket with each member's purchases
basket = groceries_data.groupby(['Member_number', 'itemDescription'])['Date'].count().unstack().fillna(0)
basket = basket.applymap(lambda x: 1 if x > 0 else 0)  # Convert counts to 1s and 0s

# 3. Apply the Apriori Algorithm
# Find frequent itemsets with a minimum support of 0.25
frequent_itemsets = apriori(basket, min_support=0.25, use_colnames=True)

# 4. Display the Results
print("\nFrequent Itemsets with support >= 0.25:")
print(frequent_itemsets)

# 5. Generate Association Rules (optional)
# Generate association rules if desired
rules = association_rules(frequent_itemsets, metric="lift", min_threshold=1)
print("\nAssociation Rules:")
print(rules)
